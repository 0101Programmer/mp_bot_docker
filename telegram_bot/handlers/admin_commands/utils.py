from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async

from ...models import Appeal, StatusChoices
from ...tools.main_logger import logger

PREVIEW_LENGTH = 300  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

class AppealState(StatesGroup):
    waiting_for_id = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
def get_appeal_keyboard(appeal_id: int, status: str, show_full_text: bool = False, text_length: int = 0, has_file: bool = False):
    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π –∏ —Å–≤—ë—Ä–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é" —Å —ç–º–æ–¥–∑–∏ üîç
    if text_length > PREVIEW_LENGTH and not show_full_text:
        builder.button(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"appeal_show_full_{appeal_id}")

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤–µ—Ä–Ω—É—Ç—å" —Å —ç–º–æ–¥–∑–∏ ‚Ü©Ô∏è
    elif text_length > PREVIEW_LENGTH and show_full_text:
        builder.button(text="‚Ü©Ô∏è –°–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"appeal_collapse_{appeal_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª" —Å —ç–º–æ–¥–∑–∏ üìé, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if has_file:
        builder.button(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª", callback_data=f"appeal_view_file_{appeal_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–≤—ë—Ä–Ω—É—Ç –∏–ª–∏ –µ–≥–æ –¥–ª–∏–Ω–∞ <= PREVIEW_LENGTH
    if text_length <= PREVIEW_LENGTH or not show_full_text:
        if status == StatusChoices.NEW:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É NEW
            builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"appeal_accept_{appeal_id}")
            builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"appeal_reject_{appeal_id}")
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"appeal_delete_{appeal_id}")

    builder.adjust(1)  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
def format_appeal_response(appeal, user_info: str, commission_name: str, preview_text: str, status_display: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏.
    :param appeal: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è.
    :param user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    :param commission_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏.
    :param preview_text: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–ª–∏ –ø–æ–ª–Ω—ã–π).
    :param status_display: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    return (
        f"üìã <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{appeal.id}</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n\n"
        f"üìö <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission_name}\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n{preview_text}\n\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {appeal.contact_info or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_display}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
async def get_appeal_details(appeal_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º–∏—Å—Å–∏—é –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.
    :param appeal_id: ID –æ–±—Ä–∞—â–µ–Ω–∏—è.
    :return: –ö–æ—Ä—Ç–µ–∂ (–æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å).
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º select_related
    appeal = await sync_to_async(Appeal.objects.select_related('user', 'commission').get)(id=appeal_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ sync_to_async
    user_info = await sync_to_async(lambda: appeal.user.username if appeal.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ sync_to_async
    commission_name = await sync_to_async(lambda: appeal.commission.name if appeal.commission else "–ö–æ–º–∏—Å—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞")()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ APPEAL_STATUSES
    status_display = next((status[1] for status in StatusChoices.APPEAL_STATUSES if status[0] == appeal.status), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    return appeal, user_info, commission_name, status_display

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def update_appeal_status(callback: CallbackQuery, new_status: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param callback: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏.
    :param new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, StatusChoices.PROCESSED –∏–ª–∏ StatusChoices.REJECTED).
    """
    appeal_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal, user_info, commission_name, status_display = await get_appeal_details(appeal_id)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π
        appeal.status = new_status

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª —Å–∏–≥–Ω–∞–ª pre_save
        await sync_to_async(appeal.save)()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ format_appeal_response
        response = format_appeal_response(
            appeal=appeal,
            user_info=user_info,
            commission_name=commission_name,
            preview_text=appeal.appeal_text[:PREVIEW_LENGTH] + "..." if len(appeal.appeal_text) > PREVIEW_LENGTH else appeal.appeal_text,
            status_display=status_display
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            response,
            reply_markup=get_appeal_keyboard(
                appeal.id,
                appeal.status,
                show_full_text=False,
                text_length=len(appeal.appeal_text),
                has_file=bool(appeal.file_path)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            ),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏