import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from asgiref.sync import sync_to_async

from .utils import PREVIEW_LENGTH, AppealState, get_appeal_details, get_appeal_keyboard, update_appeal_status, \
    format_appeal_response
from ...models import Appeal, StatusChoices
from ...tools.main_logger import logger

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π"
@router.callback_query(F.data == "view_appeals")
async def view_appeals(callback: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
    await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏
    await callback.message.answer(
        "üîç <b>–í–≤–µ–¥–∏—Ç–µ ID –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"
        "<i>(–ü—Ä–∏–º–µ—Ä: 123)</i>",
        parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
    )
    await state.set_state(AppealState.waiting_for_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID
@router.message(AppealState.waiting_for_id)
async def process_appeal_id(message: Message, state: FSMContext):
    appeal_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not appeal_id.isdigit():
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.</b>\n\n"
            "<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:</i>",
            parse_mode='HTML'
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_appeal_details
        appeal, user_info, commission_name, status_display = await get_appeal_details(int(appeal_id))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
        full_text = appeal.appeal_text
        preview_text = full_text[:PREVIEW_LENGTH] + "..." if len(full_text) > PREVIEW_LENGTH else full_text
        show_full_text = len(full_text) <= PREVIEW_LENGTH

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
        response = format_appeal_response(
            appeal=appeal,
            user_info=user_info,
            commission_name=commission_name,
            preview_text=preview_text,
            status_display=status_display
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            response,
            reply_markup=get_appeal_keyboard(
                appeal.id,
                appeal.status,
                show_full_text=show_full_text,
                text_length=len(full_text),
                has_file=bool(appeal.file_path)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            ),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Appeal.DoesNotExist:
        await message.answer(
            "üîç <b>–û–±—Ä–∞—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
@router.callback_query(F.data.startswith("appeal_view_file_"))
async def view_file(callback: CallbackQuery):
    appeal_id = int(callback.data.split("_")[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        appeal = await sync_to_async(Appeal.objects.get)(id=appeal_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if appeal.file_path and hasattr(appeal.file_path, 'path') and os.path.exists(appeal.file_path.path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —ç–º–æ–¥–∑–∏
            file = FSInputFile(appeal.file_path.path)
            await callback.message.answer_document(
                file,
                caption="üìé <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.</b>",
                parse_mode='HTML'
            )
        else:
            await callback.message.answer(
                "‚ùå <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
@router.callback_query(F.data.startswith("appeal_show_full_"))
async def show_full_text(callback: CallbackQuery):
    appeal_id = int(callback.data.split("_")[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal, user_info, commission_name, status_display = await get_appeal_details(appeal_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ format_appeal_response
        response = format_appeal_response(
            appeal=appeal,
            user_info=user_info,
            commission_name=commission_name,
            preview_text=appeal.appeal_text,  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            status_display=status_display
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            response,
            reply_markup=get_appeal_keyboard(
                appeal.id,
                appeal.status,
                show_full_text=True,
                text_length=len(appeal.appeal_text),
                has_file=bool(appeal.file_path)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            ),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤–µ—Ä–Ω—É—Ç—å"
@router.callback_query(F.data.startswith("appeal_collapse_"))
async def collapse_text(callback: CallbackQuery):
    appeal_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal, user_info, commission_name, status_display = await get_appeal_details(appeal_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
        full_text = appeal.appeal_text
        preview_text = full_text[:PREVIEW_LENGTH] + "..." if len(full_text) > PREVIEW_LENGTH else full_text

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ format_appeal_response
        response = format_appeal_response(
            appeal=appeal,
            user_info=user_info,
            commission_name=commission_name,
            preview_text=preview_text,
            status_display=status_display
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            response,
            reply_markup=get_appeal_keyboard(
                appeal.id,
                appeal.status,
                show_full_text=False,
                text_length=len(full_text),
                has_file=bool(appeal.file_path)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            ),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
@router.callback_query(F.data.startswith("appeal_accept_"))
async def accept_appeal(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å".
    """
    await update_appeal_status(callback, StatusChoices.PROCESSED)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@router.callback_query(F.data.startswith("appeal_reject_"))
async def reject_appeal(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å".
    """
    await update_appeal_status(callback, StatusChoices.REJECTED)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
@router.callback_query(F.data.startswith("appeal_delete_"))
async def delete_appeal(callback: CallbackQuery):
    appeal_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data

    try:
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await sync_to_async(Appeal.objects.filter(id=appeal_id).delete)()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å —ç–º–æ–¥–∑–∏
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{appeal_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.</b>",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>\n\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )
    finally:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏