from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.db.utils import IntegrityError

from ...models import CommissionInfo

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
class AddCommissionState(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
    waiting_for_description = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ "–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏"
@router.callback_query(F.data == "commission_actions")
async def commission_actions_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data="add_commission")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data="delete_commissions")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    builder.adjust(1)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏:", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
@router.callback_query(F.data == "add_commission")
async def start_add_commission(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddCommissionState.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
@router.message(AddCommissionState.waiting_for_name)
async def process_commission_name(message: Message, state: FSMContext):
    commission_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    commission_exists = await sync_to_async(CommissionInfo.objects.filter(name=commission_name).exists)()

    if commission_exists:
        await message.answer(
            f"‚ùå –ö–æ–º–∏—Å—Å–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{commission_name}'</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return

    await state.update_data(name=commission_name)
    await state.set_state(AddCommissionState.waiting_for_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@router.message(AddCommissionState.waiting_for_description)
async def process_commission_description(message: Message, state: FSMContext):
    data = await state.get_data()
    commission_name = data.get('name')
    commission_description = message.text.strip()

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é
        await sync_to_async(CommissionInfo.objects.create)(
            name=commission_name,
            description=commission_description
        )

        await message.answer(
            f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è <b>'{commission_name}'</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {commission_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {commission_description}",
            parse_mode="HTML"
        )

    except IntegrityError:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∏—Å—Å–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{commission_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è."
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
@router.callback_query(F.data == "delete_commissions")
async def delete_commissions(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    commissions = await sync_to_async(list)(CommissionInfo.objects.all())

    if commissions:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        builder = InlineKeyboardBuilder()
        for commission in commissions:
            builder.button(
                text=f"‚ùå {commission.name}",  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É "‚ùå" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                callback_data=f"confirm_delete_commission:{commission.id}"
            )
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await callback.message.edit_text("–ö–æ–º–∏—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
@router.callback_query(F.data.startswith("confirm_delete_commission:"))
async def confirm_delete_commission(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ callback_data
    commission_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    commission = await sync_to_async(CommissionInfo.objects.get)(id=commission_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_commission:{commission.id}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="delete_commissions")
    builder.adjust(2)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é '{commission.name}'?",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
@router.callback_query(F.data.startswith("delete_commission:"))
async def delete_commission(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ callback_data
    commission_id = int(callback.data.split(":")[1])

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await sync_to_async(CommissionInfo.objects.filter(id=commission_id).delete)()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    await callback.answer(f"–ö–æ–º–∏—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await delete_commissions(callback)