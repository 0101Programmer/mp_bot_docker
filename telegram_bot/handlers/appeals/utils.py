from html import escape
from typing import Callable, Awaitable

from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from decouple import config
from django.core.exceptions import ObjectDoesNotExist
from django.utils.translation import gettext as _

from ...models import Appeal, StatusChoices
from ...models import CommissionInfo, User
from ...tools.main_logger import logger

# ===================== –ö–û–ù–°–¢–ê–ù–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø =====================
PREVIEW_LENGTH = 300  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
DATE_FORMAT = "%d.%m.%Y %H:%M"  # –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
SEPARATOR = "<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>"

# –®–∞–±–ª–æ–Ω—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–µ–¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
APPEAL_HEADER = "<b>üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{id}</b>\n{separator}\n"
STATUS_LINE = "{emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
COMMISSION_LINE = "üë• <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission}\n\n"
TEXT_HEADER = "üìù <b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n<code>{text}</code>\n\n"
CONTACTS_LINE = "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contacts}\n\n"
DATES_LINE = "üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}\nüîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_at}"

# –®–∞–±–ª–æ–Ω—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
FULL_APPEAL_HEADER = "<b>üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{id}</b>\n{separator}\n"
FULL_STATUS_LINE = "{emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
FULL_COMMISSION_LINE = "üë• <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission}\n\n"
FULL_TEXT_HEADER = "üìù <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n<code>{text}</code>\n\n"
FILE_ATTACHMENT_LINE = "\nüìé <i>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç</i>"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
APPEAL_STATUS_MAPPING = {
    StatusChoices.NEW: {
        'display': _('–ù–æ–≤–æ–µ'),
        'emoji': 'üÜï'
    },
    StatusChoices.PROCESSED: {
        'display': _('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'),
        'emoji': '‚úÖ'
    },
    StatusChoices.REJECTED: {
        'display': _('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
        'emoji': '‚ùå'
    }
}

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def generate_appeal_response(appeal: Appeal) -> tuple[str, InlineKeyboardBuilder]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
    status_data = APPEAL_STATUS_MAPPING.get(appeal.status.lower(), {
        'display': appeal.status,
        'emoji': 'üìÑ'
    })

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    commission_name = escape(appeal.commission.name) if appeal.commission else _("–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    needs_expansion = len(appeal.appeal_text) > PREVIEW_LENGTH
    display_text = escape(appeal.appeal_text[:PREVIEW_LENGTH] + ("..." if needs_expansion else ""))
    contact_info = escape(appeal.contact_info) if appeal.contact_info else _('–ù–µ —É–∫–∞–∑–∞–Ω–∞')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at = appeal.created_at.strftime(DATE_FORMAT)
    updated_at = appeal.updated_at.strftime(DATE_FORMAT)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
    response = (
        APPEAL_HEADER.format(id=appeal.id, separator=SEPARATOR) +
        STATUS_LINE.format(emoji=status_data['emoji'], status=escape(status_data['display'])) +
        COMMISSION_LINE.format(commission=commission_name) +
        TEXT_HEADER.format(text=display_text) +
        CONTACTS_LINE.format(contacts=contact_info) +
        SEPARATOR + "\n" +
        DATES_LINE.format(created_at=created_at, updated_at=updated_at)
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if needs_expansion:
        builder.button(text=f"üìÑ {_('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é')}", callback_data=f"show_full:{appeal.id}")
    builder.button(text=f"üóë {_('–£–¥–∞–ª–∏—Ç—å')}", callback_data=f"delete_appeal:{appeal.id}")
    if appeal.file_path:
        builder.button(text=f"üìé {_('–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª')}", callback_data=f"view_file:{appeal.id}")
    builder.adjust(1)

    return response, builder


async def process_appeal(
        callback: CallbackQuery,
        response_message: str,
        error_message: str,
        success_action: Callable[[CallbackQuery], Awaitable[None]] = None
):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.

    :param callback: CallbackQuery –æ–±—ä–µ–∫—Ç
    :param response_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    :param success_action: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        appeal_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        response, builder = await generate_appeal_response(appeal)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥–∞
        await callback.message.edit_text(
            response,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        )

        # –í—ã–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
        if success_action:
            await success_action(callback)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer(response_message)

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in process_appeal: {e}", exc_info=True)
        await callback.answer(error_message, show_alert=True)

# ===================== –ö–û–ù–§–ò–ì –î–õ–Ø –ù–ê–ü–ò–°–ê–ù–ò–Ø –û–ë–†–ê–©–ï–ù–ò–ô =====================

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
EMAIL_PATTERN = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
PHONE_PATTERN = r'^\+7\d{10}$'  # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX

# –î–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–∞
MIN_TXT_LENGTH = int(config('MIN_TXT_LENGTH'))
MAX_TXT_LENGTH = int(config('MAX_TXT_LENGTH'))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö)
MAX_FILE_SIZE = int(config('MAX_FILE_SIZE'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@sync_to_async
def save_appeal_to_db(data, telegram_id, django_file=None, original_file_name=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = User.objects.get(telegram_id=telegram_id)
    except ObjectDoesNotExist:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ ID
        commission = CommissionInfo.objects.get(id=data["commission_id"])
    except ObjectDoesNotExist:
        raise ValueError("–ö–æ–º–∏—Å—Å–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
    appeal = Appeal(
        user=user,
        commission=commission,
        appeal_text=data["appeal_text"],
        contact_info=data.get("contact_info"),
        status=StatusChoices.NEW
    )

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if django_file and original_file_name:
        appeal.file_path.save(original_file_name, django_file)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    appeal.save()
    return appeal

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AppealForm(StatesGroup):
    choosing_commission = State()  # –í—ã–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏
    choosing_contact_option = State()  # –í—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
    entering_contact_info = State()  # –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    writing_appeal = State()  # –ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    attaching_file = State()  # –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞