
from aiogram import Router, F
from aiogram.types import FSInputFile, InlineKeyboardButton
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async

from ...models import Appeal
from ...tools.main_logger import logger

router = Router()

# –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJIS = {
    '–Ω–æ–≤–æ–µ': 'üÜï',
    '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ': '‚úÖ',
    '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ': '‚ùå'
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_DISPLAY_NAMES = {
    '–Ω–æ–≤–æ–µ': '–ù–æ–≤–æ–µ',
    '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
    '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
}


async def generate_appeal_response(appeal: Appeal) -> tuple[str, InlineKeyboardBuilder]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
    status_lower = appeal.status.lower()
    status_display = STATUS_DISPLAY_NAMES.get(status_lower, appeal.status)
    status_emoji = STATUS_EMOJIS.get(status_lower, 'üìÑ')

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
    commission_name = appeal.commission.name if appeal.commission else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
    preview_length = 300  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    needs_expansion = len(appeal.appeal_text) > preview_length
    display_text = appeal.appeal_text[:preview_length] + "..." if needs_expansion else appeal.appeal_text

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at_formatted = appeal.created_at.strftime("%d.%m.%Y %H:%M")
    updated_at_formatted = appeal.updated_at.strftime("%d.%m.%Y %H:%M")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    response = (
        f"üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal.id}\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_display}\n"
        f"üë• –ö–æ–º–∏—Å—Å–∏—è: {commission_name}\n"
        f"üìù –¢–µ–∫—Å—Ç: {display_text}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {appeal.contact_info or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_formatted}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at_formatted}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω
    if needs_expansion:
        builder.button(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"show_full:{appeal.id}")

    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_appeal:{appeal.id}")

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω
    if appeal.file_path:
        builder.button(text="üìé –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", callback_data=f"view_file:{appeal.id}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    builder.adjust(1)

    return response, builder


@router.message(F.text == "–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def track_appeal_status(message: Message, user=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è".
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        appeals = await sync_to_async(list)(
            Appeal.objects.filter(user=user)
            .select_related('commission')
            .order_by('-id')  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        )

        if not appeals:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        builder = InlineKeyboardBuilder()

        for appeal in appeals:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
            status_lower = appeal.status.lower()

            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = STATUS_EMOJIS.get(status_lower, 'üìÑ')
            status_display = STATUS_DISPLAY_NAMES.get(status_lower, appeal.status)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
            commission_name = appeal.commission.name if appeal.commission else "–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = (
                f"‚Ññ{appeal.id} | {status_emoji} {status_display} | "
                f"{commission_name}"
            )

            builder.add(InlineKeyboardButton(
                text=button_text,
                callback_data=f"appeal_detail:{appeal.id}"
            ))

        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

        await message.answer(
            "üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"Error in track_appeal_status: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.")


@router.callback_query(F.data.startswith("appeal_detail:"))
async def show_appeal_detail(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        response, builder = await generate_appeal_response(appeal)

        await callback.message.answer(response, reply_markup=builder.as_markup())
        await callback.answer()

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in show_appeal_detail: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª"
@router.callback_query(F.data.startswith("view_file:"))
async def view_file(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data
        appeal_id = int(callback_query.data.split(":")[1])

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        appeal = await sync_to_async(Appeal.objects.get)(id=appeal_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if appeal.file_path and appeal.file_path.storage.exists(appeal.file_path.name):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file_path = appeal.file_path.path  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file = FSInputFile(file_path)
            await callback_query.message.answer_document(file)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback_query.message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ callback)
        await callback_query.answer()

    except Appeal.DoesNotExist:
        await callback_query.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
@router.callback_query(F.data.startswith("show_full:"))
async def show_full_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
        short_response, builder = await generate_appeal_response(appeal)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        status_emoji = STATUS_EMOJIS.get(appeal.status.lower(), 'üìÑ')
        status_display = STATUS_DISPLAY_NAMES.get(appeal.status.lower(), appeal.status)
        commission_name = appeal.commission.name if appeal.commission else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        full_response = (
            f"üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal_id}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_display}\n"
            f"üë• –ö–æ–º–∏—Å—Å–∏—è: {commission_name}\n\n"
            f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
            f"{appeal.appeal_text}\n"
        )

        if appeal.file_path:
            full_response += "\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        full_builder = InlineKeyboardBuilder()
        full_builder.button(
            text="‚Ü©Ô∏è –°–≤–µ—Ä–Ω—É—Ç—å",
            callback_data=f"collapse:{appeal_id}"
        )
        if appeal.file_path:
            full_builder.button(
                text="üìé –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
                callback_data=f"view_file:{appeal_id}"
            )
        full_builder.adjust(1)

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if callback.message:
            await callback.message.edit_text(
                full_response,
                reply_markup=full_builder.as_markup()
            )
        else:
            await callback.message.answer(
                full_response,
                reply_markup=full_builder.as_markup()
            )

        await callback.answer()

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in show_full_appeal: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)


@router.callback_query(F.data.startswith("collapse:"))
async def collapse_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        response, builder = await generate_appeal_response(appeal)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
        await callback.message.edit_text(
            response,
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in collapse_appeal: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("delete_appeal:"))
async def request_delete_confirmation(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])

        builder = InlineKeyboardBuilder()
        builder.button(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete:{appeal_id}"
        )
        builder.button(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_delete:{appeal_id}"
        )
        builder.adjust(2)

        await callback.message.edit_text(
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Delete confirmation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(Appeal.objects.get)(id=appeal_id)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if appeal.file_path:
            try:
                await sync_to_async(appeal.file_path.storage.delete)(appeal.file_path.name)
            except Exception as e:
                logger.error(f"File delete error: {e}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await sync_to_async(appeal.delete)()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        )
        await callback.answer()

    except Appeal.DoesNotExist:
        await callback.message.edit_text("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in confirm_delete: {e}", exc_info=True)
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        response, builder = await generate_appeal_response(appeal)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            response,
            reply_markup=builder.as_markup()
        )
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in cancel_delete: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)
