from aiogram import Router, F
from aiogram.types import FSInputFile, InlineKeyboardButton
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.utils.translation import gettext as _
from html import escape
from ...models import Appeal, StatusChoices
from ...tools.main_logger import logger

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PREVIEW_LENGTH = 300  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
APPEAL_STATUS_MAPPING = {
    StatusChoices.NEW: {
        'display': _('–ù–æ–≤–æ–µ'),
        'emoji': 'üÜï'
    },
    StatusChoices.PROCESSED: {
        'display': _('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'),
        'emoji': '‚úÖ'
    },
    StatusChoices.REJECTED: {
        'display': _('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
        'emoji': '‚ùå'
    }
}


# async def generate_appeal_response(appeal: Appeal) -> tuple[str, InlineKeyboardBuilder]:
#     """
#     –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
#     """
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
#     status_data = APPEAL_STATUS_MAPPING.get(appeal.status.lower(), {
#         'display': appeal.status,
#         'emoji': 'üìÑ'
#     })
#
#     # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
#     commission_name = appeal.commission.name if appeal.commission else _("–ù–µ —É–∫–∞–∑–∞–Ω–∞")
#
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
#     needs_expansion = len(appeal.appeal_text) > PREVIEW_LENGTH
#     display_text = appeal.appeal_text[:PREVIEW_LENGTH] + "..." if needs_expansion else appeal.appeal_text
#
#     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
#     created_at_formatted = appeal.created_at.strftime("%d.%m.%Y %H:%M")
#     updated_at_formatted = appeal.updated_at.strftime("%d.%m.%Y %H:%M")
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
#     response = (
#         f"üìå {_('–û–±—Ä–∞—â–µ–Ω–∏–µ')} ‚Ññ{appeal.id}\n"
#         f"{status_data['emoji']} {_('–°—Ç–∞—Ç—É—Å')}: {status_data['display']}\n"
#         f"üë• {_('–ö–æ–º–∏—Å—Å–∏—è')}: {commission_name}\n"
#         f"üìù {_('–¢–µ–∫—Å—Ç')}: {display_text}\n"
#         f"üìû {_('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}: {appeal.contact_info or _('–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
#         f"üìÖ {_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')}: {created_at_formatted}\n"
#         f"üîÑ {_('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')}: {updated_at_formatted}"
#     )
#
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     builder = InlineKeyboardBuilder()
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω
#     if needs_expansion:
#         builder.button(text=f"üìÑ {_('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é')}", callback_data=f"show_full:{appeal.id}")
#
#     # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
#     builder.button(text=f"üóë {_('–£–¥–∞–ª–∏—Ç—å')}", callback_data=f"delete_appeal:{appeal.id}")
#
#     # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω
#     if appeal.file_path:
#         builder.button(text=f"üìé {_('–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª')}", callback_data=f"view_file:{appeal.id}")
#
#     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
#     builder.adjust(1)
#
#     return response, builder

async def generate_appeal_response(appeal: Appeal) -> tuple[str, InlineKeyboardBuilder]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
    status_data = APPEAL_STATUS_MAPPING.get(appeal.status.lower(), {
        'display': appeal.status,
        'emoji': 'üìÑ'
    })

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
    commission_name = escape(appeal.commission.name) if appeal.commission else _("–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
    needs_expansion = len(appeal.appeal_text) > PREVIEW_LENGTH
    display_text = escape(appeal.appeal_text[:PREVIEW_LENGTH] + ("..." if needs_expansion else ""))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at_formatted = appeal.created_at.strftime("%d.%m.%Y %H:%M")
    updated_at_formatted = appeal.updated_at.strftime("%d.%m.%Y %H:%M")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    response = (
        f"<b>üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal.id}</b>\n"
        f"<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>\n"
        f"{status_data['emoji']} <b>–°—Ç–∞—Ç—É—Å:</b> {escape(status_data['display'])}\n\n"
        f"üë• <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission_name}\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n<code>{display_text}</code>\n\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {escape(appeal.contact_info) if appeal.contact_info else _('–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at_formatted}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_at_formatted}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if needs_expansion:
        builder.button(text=f"üìÑ {_('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é')}", callback_data=f"show_full:{appeal.id}")
    builder.button(text=f"üóë {_('–£–¥–∞–ª–∏—Ç—å')}", callback_data=f"delete_appeal:{appeal.id}")
    if appeal.file_path:
        builder.button(text=f"üìé {_('–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª')}", callback_data=f"view_file:{appeal.id}")
    builder.adjust(1)

    return response, builder


@router.message(F.text == "–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def track_appeal_status(message: Message, user=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è".
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        appeals = await sync_to_async(list)(
            Appeal.objects.filter(user=user)
            .select_related('commission')
            .order_by('-id')  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        )

        if not appeals:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        builder = InlineKeyboardBuilder()

        for appeal in appeals:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
            status_data = APPEAL_STATUS_MAPPING.get(appeal.status.lower(), {
                'display': appeal.status,
                'emoji': 'üìÑ'
            })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = (
                f"‚Ññ{appeal.id} | {status_data['emoji']} {status_data['display']} | "
                f"{escape(appeal.commission.name)}"
            )

            builder.add(InlineKeyboardButton(
                text=button_text,
                callback_data=f"appeal_detail:{appeal.id}"
            ))

        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

        await message.answer(
            "üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"Error in track_appeal_status: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.")


@router.callback_query(F.data.startswith("appeal_detail:"))
async def show_appeal_detail(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        response, builder = await generate_appeal_response(appeal)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        await callback.message.answer(
            response,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML
        )
        await callback.answer()

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in show_appeal_detail: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è!", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª"
@router.callback_query(F.data.startswith("view_file:"))
async def view_file(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ callback_data
        appeal_id = int(callback_query.data.split(":")[1])

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        appeal = await sync_to_async(Appeal.objects.get)(id=appeal_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if appeal.file_path and appeal.file_path.storage.exists(appeal.file_path.name):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file_path = appeal.file_path.path  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file = FSInputFile(file_path)
            await callback_query.message.answer_document(file)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback_query.message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ callback)
        await callback_query.answer()

    except Appeal.DoesNotExist:
        await callback_query.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
@router.callback_query(F.data.startswith("show_full:"))
async def show_full_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        status_data = APPEAL_STATUS_MAPPING.get(appeal.status.lower(), {
            'display': appeal.status,
            'emoji': 'üìÑ'
        })

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        commission_name = escape(appeal.commission.name) if appeal.commission else _("–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        appeal_text = escape(appeal.appeal_text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        full_response = (
            f"<b>üìå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal_id}</b>\n"
            f"<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>\n"
            f"{status_data['emoji']} <b>–°—Ç–∞—Ç—É—Å:</b> {escape(status_data['display'])}\n\n"
            f"üë• <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission_name}\n\n"
            f"üìù <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n"
            f"<code>{appeal_text}</code>\n"
        )

        if appeal.file_path:
            full_response += "\nüìé <i>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç</i>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        full_builder = InlineKeyboardBuilder()
        full_builder.button(
            text="‚Ü©Ô∏è –°–≤–µ—Ä–Ω—É—Ç—å",
            callback_data=f"collapse:{appeal_id}"
        )
        if appeal.file_path:
            full_builder.button(
                text="üìé –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
                callback_data=f"view_file:{appeal_id}"
            )
        full_builder.adjust(1)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            full_response,
            reply_markup=full_builder.as_markup(),
            parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML
        )
        await callback.answer()

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in show_full_appeal: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤–µ—Ä–Ω—É—Ç—å"
@router.callback_query(F.data.startswith("collapse:"))
async def collapse_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        response, builder = await generate_appeal_response(appeal)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        await callback.message.edit_text(
            response,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        await callback.answer("‚Ü©Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ")

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in collapse_appeal: {e}", exc_info=True)
        await callback.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
            show_alert=True
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("delete_appeal:"))
async def request_delete_confirmation(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])

        builder = InlineKeyboardBuilder()
        builder.button(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete:{appeal_id}"
        )
        builder.button(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_delete:{appeal_id}"
        )
        builder.adjust(2)

        await callback.message.edit_text(
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Delete confirmation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])
        appeal = await sync_to_async(Appeal.objects.get)(id=appeal_id)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        if appeal.file_path:
            try:
                file_path = appeal.file_path.name
                storage = appeal.file_path.storage
                await sync_to_async(storage.delete)(file_path)
                logger.info(f"–§–∞–π–ª –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: {file_path}")
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}: {file_error}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await sync_to_async(appeal.delete)()
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ {appeal_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å HTML
        success_message = (
            f"<b>‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal_id} —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
            f"<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.</i>"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            success_message,
            reply_markup=None,
            parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )
        await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

    except Appeal.DoesNotExist:
        error_message = (
            f"<b>‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ."
        )
        await callback.message.edit_text(
            error_message,
            parse_mode='HTML'
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}: {e}", exc_info=True)
        error_message = (
            f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{appeal_id}</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await callback.message.edit_text(
            error_message,
            parse_mode='HTML'
        )
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete_appeal(callback: CallbackQuery):
    try:
        appeal_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal = await sync_to_async(
            Appeal.objects.select_related('commission').get
        )(id=appeal_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        response, builder = await generate_appeal_response(appeal)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥–∞
        await callback.message.edit_text(
            response,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        )
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Appeal.DoesNotExist:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in cancel_delete_appeal: {e}", exc_info=True)
        await callback.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
            show_alert=True
        )