import os
import re
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.core.files import File
from .utils import PHONE_PATTERN, EMAIL_PATTERN, MIN_TXT_LENGTH, MAX_TXT_LENGTH, save_appeal_to_db, MAX_FILE_SIZE, \
    AppealForm
from ...models import CommissionInfo
from ...tools.main_logger import logger

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
@router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
async def start_appeal_form(message: Message, state: FSMContext, user=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ".
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ middleware
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        commissions = await sync_to_async(list)(CommissionInfo.objects.all())

        if commissions:
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∏—Å—Å–∏–∏
            builder = InlineKeyboardBuilder()
            for commission in commissions:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üìã –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∏—Å—Å–∏–∏
                builder.button(
                    text=f"üìã {commission.name}",
                    callback_data=f"appeal_commission:{commission.id}"
                )
            builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é:</b>",  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ú® –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                reply_markup=builder.as_markup(),
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏
            await state.set_state(AppealForm.choosing_commission)
        else:
            await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π –ø—É—Å—Ç.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ö†Ô∏è

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
@router.callback_query(AppealForm.choosing_commission, F.data.startswith("appeal_commission:"))
async def process_commission_choice(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ callback_data
        commission_id = int(callback_query.data.split(":")[1])
        await state.update_data(commission_id=commission_id)

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        builder = InlineKeyboardBuilder()
        builder.button(text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="contact:yes")
        builder.button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="contact:no")
        builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text(
            "‚ùì <b>–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?</b>",  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await state.set_state(AppealForm.choosing_contact_option)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–∏—Å—Å–∏–∏: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@router.callback_query(AppealForm.choosing_contact_option, F.data.startswith("contact:"))
async def process_contact_choice(callback_query: CallbackQuery, state: FSMContext):
    try:
        contact_option = callback_query.data.split(":")[1]
        await state.update_data(contact_option=contact_option)

        if contact_option == "yes":
            # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await callback_query.message.edit_text(
                "üì≤ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email:</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            await state.set_state(AppealForm.entering_contact_info)
        else:
            # –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await callback_query.message.edit_text(
                "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            await state.set_state(AppealForm.writing_appeal)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@router.message(AppealForm.entering_contact_info)
async def process_contact_info(message: Message, state: FSMContext):
    try:
        contact_info = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–æ–¥ –ø–∞—Ç—Ç–µ—Ä–Ω—É email –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if re.match(EMAIL_PATTERN, contact_info) or re.match(PHONE_PATTERN, contact_info):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(contact_info=contact_info)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await message.answer(
                "‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.</b>\n\n"
                "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            await state.set_state(AppealForm.writing_appeal)
        else:
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
            builder = InlineKeyboardBuilder()
            builder.button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="anonymous_appeal")
            builder.adjust(1)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —ç–º–æ–¥–∑–∏
            await message.answer(
                "‚ùå <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7XXXXXXXXXX).",
                reply_markup=builder.as_markup(),
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
@router.callback_query(AppealForm.entering_contact_info, F.data == "anonymous_appeal")
async def skip_contact_info(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –ø—É—Å—Ç–æ–π)
        await state.update_data(contact_info=None)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await callback_query.message.edit_text(
            "üïµÔ∏è‚Äç‚ôÇÔ∏è <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.</b>\n\n"
            "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )
        await state.set_state(AppealForm.writing_appeal)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
@router.message(AppealForm.writing_appeal)
async def process_appeal_text(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
        appeal_text = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(appeal_text) < MIN_TXT_LENGTH:
            await message.answer(
                f"‚ùå <b>–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {MIN_TXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            return
        elif len(appeal_text) > MAX_TXT_LENGTH:
            await message.answer(
                f"‚ùå <b>–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ {MAX_TXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(appeal_text=appeal_text)

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="file:attach")
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="file:skip")
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "‚úçÔ∏è <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?",
            reply_markup=builder.as_markup(),
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(AppealForm.attaching_file)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@router.callback_query(AppealForm.attaching_file, F.data.startswith("file:"))
async def process_file_choice(callback_query: CallbackQuery, state: FSMContext):
    try:
        file_option = callback_query.data.split(":")[1]

        if file_option == "attach":
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await callback_query.message.edit_text(
                "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            await state.set_state(AppealForm.attaching_file)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            data = await state.get_data()
            await save_appeal_to_db(data, callback_query.from_user.id)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏
            await callback_query.message.edit_text(
                "‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
@router.message(AppealForm.attaching_file, F.text)
async def handle_invalid_file(message: Message):
    try:
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞", callback_data="skip_file")]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —ç–º–æ–¥–∑–∏
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.",
            reply_markup=markup,
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@router.message(AppealForm.attaching_file, F.photo | F.document)
async def process_file_upload(message: Message, state: FSMContext):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            file_id = message.photo[-1].file_id
            file_info = await message.bot.get_file(file_id)
            file_size = message.photo[-1].file_size  # –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –≤ –±–∞–π—Ç–∞—Ö
            file_extension = ".jpg"  # –§–æ—Ç–æ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ .jpg
            original_file_name = f"{message.from_user.id}_photo{file_extension}"

        elif message.document:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            file_id = message.document.file_id
            file_info = await message.bot.get_file(file_id)
            file_size = message.document.file_size  # –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö
            original_file_name = message.document.file_name

        else:
            await message.answer(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.</b>",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            await message.answer(
                f"‚ùå <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024 * 1024)} MB.",
                parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
            )
            return

        # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        temp_dir = os.path.join(os.getcwd(), 'tmp')
        os.makedirs(temp_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É tmp, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        temp_file_path = os.path.join(temp_dir, original_file_name)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        await message.bot.download_file(file_info.file_path, temp_file_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Django
        with open(temp_file_path, 'rb') as f:
            django_file = File(f)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            data = await state.get_data()
            await save_appeal_to_db(data, message.from_user.id, django_file, original_file_name)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        os.remove(temp_file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"
@router.callback_query(AppealForm.attaching_file, F.data == "skip_file")
async def skip_file_upload(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∞–π–ª–∞
        data = await state.get_data()
        await save_appeal_to_db(data, callback_query.from_user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
        await callback_query.message.edit_text(
            "‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
        )