from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from .utils import generate_commissions_keyboard

from ...models import CommissionInfo
from ...tools.main_logger import logger

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π"
@router.message(F.text == "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π")
async def show_commissions(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        commissions = await sync_to_async(list)(CommissionInfo.objects.all())

        if not commissions:
            await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π –ø—É—Å—Ç.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
        markup = generate_commissions_keyboard(commissions)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>",
            reply_markup=markup,
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
@router.callback_query(F.data.startswith("info_commission:"))
async def show_commission_info(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ callback_data
        commission_id = int(callback_query.data.split(":")[1])

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∏—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        commission = await sync_to_async(CommissionInfo.objects.get)(id=commission_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π, —ç–º–æ–¥–∑–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        response = (
            f"üìã <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission.name}\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            f"üî¢ <b>ID –∫–æ–º–∏—Å—Å–∏–∏:</b> <code>{commission.id}</code>\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ ID
            f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <i>{commission.created_at.strftime('%d.%m.%Y %H:%M')}</i>\n\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –¥–∞—Ç—ã
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{commission.description or '<i>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</i>'}"  # –û–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (–¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üîô)
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_commissions")]
            ]
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await callback_query.message.edit_text(
            text=response,
            reply_markup=markup,
            parse_mode='HTML'  # –ü–µ—Ä–µ–¥–∞–µ–º parse_mode –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        )

    except CommissionInfo.DoesNotExist:
        await callback_query.message.edit_text("–ö–æ–º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏–∏: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_commissions")
async def go_back_to_commissions(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∏—Å—Å–∏–π.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        commissions = await sync_to_async(list)(CommissionInfo.objects.all())

        if not commissions:
            await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π –ø—É—Å—Ç.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
        markup = generate_commissions_keyboard(commissions)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∏—Å—Å–∏–π
        await callback_query.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>",
            reply_markup=markup,
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∏—Å—Å–∏–π: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")