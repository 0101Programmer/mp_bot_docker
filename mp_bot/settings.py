"""
Django settings for mp_bot project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
from logging.config import dictConfig
from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# Секретный ключ джанго и токен бота телеграм
SECRET_KEY = config('SECRET_KEY')
TELEGRAM_API_TOKEN = config('TELEGRAM_API_TOKEN')

# Настройка для авто-создания суперпользователя
DJANGO_SUPERUSER_NAME = config('DJANGO_SUPERUSER_NAME')
DJANGO_SUPERUSER_PASSWORD = config('DJANGO_SUPERUSER_PASSWORD')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Базовые разрешенные хосты
ALLOWED_HOSTS = ['141.8.194.104', '141.8.194.104:8000', 'localhost', '127.0.0.1']

# Динамическое добавление хоста из переменной окружения для использования Telegram WebAPP
TELEGRAM_WEBAPP_HOST = config('TELEGRAM_WEBAPP_HOST')
ALLOWED_HOSTS.append(TELEGRAM_WEBAPP_HOST)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'telegram_bot.apps.TelegramBotConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mp_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mp_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST') if int(config('USE_DOCKER')) else config('NO_DOCKER_DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

ADMIN_USER_ID = os.getenv('ADMIN_USER_ID', '0')

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройка кеширования
redis_host = config('REDIS_HOST') if int(config('USE_DOCKER')) else config('NO_DOCKER_REDIS_HOST')
redis_port = config('REDIS_PORT')
redis_db = config('REDIS_DB')

if int(config('USE_DOCKER')):
    redis_location = f'redis://{redis_host}:{redis_port}/{redis_db}'
else:
    redis_password = config('REDIS_PASS')
    redis_location = f'redis://:{redis_password}@{redis_host}:{redis_port}/{redis_db}'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': redis_location,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': '' if int(config('USE_DOCKER')) else config('REDIS_PASS'),
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
        },
        'KEY_PREFIX': 'telegram_bot',
    }
}

# Логирование
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Не отключаем существующие логгеры
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',  # Используем форматтер
        },
    },
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name}: {message}',
            'style': '{',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',  # Уровень логирования
    },
}

# Применяем конфигурацию логгера
dictConfig(LOGGING)

# Создаем глобальный логгер
logger = logging.getLogger('django')

# Настройка CORS для фронтенд
CORS_ALLOWED_ORIGINS = [
    config('FRONTEND_CORS_ORIGIN'),
    config('TELEGRAM_WEBAPP_HOST_FOR_CORS'),
]

INSTALLED_APPS += [
    'corsheaders',
]

MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')

# Путь для хранения загруженных файлов
MEDIA_ROOT = os.path.join(BASE_DIR)

# URL для доступа к медиафайлам
MEDIA_URL = '/uploads/'